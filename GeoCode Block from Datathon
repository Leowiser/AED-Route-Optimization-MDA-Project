import requests
from time import sleep

# Define a function to geocode an address
def geocode_address(query):
    # Encode query parameters
    params = {'q': query, 'format': 'json', 'countrycodes': 'BE', 'dedupe': 1,  'limit': 1}
    headers = {'User-Agent': 'Datathon 2024 KUL/zhenyu.xu@student.kuleuven.be'}
    response = requests.get('https://nominatim.openstreetmap.org/search', params=params, headers=headers)
    if response.status_code == 200:
        results = response.json()
        if results:
            return results[0]
    return None

# Process missing postal codes in the DataFrame
for index, row in aed_loc.iterrows():
    # Check if the postal code or municipality is missing, and the address is not a special case
    if pd.isnull(row['postal_code']) or pd.isnull(row['municipality']):
        if row['address'] == 'Appareil nomade non attribué à un véhicule':
            continue  # Special case, skip
        elif row['address'] != 'pas d adresse':
            # If number is not NaN, convert to integer and concatenate with address
            number = int(row['number']) if pd.notnull(row['number']) else ''
            full_address = f"{row['address']} {number}".strip()
            
            # Call the geocode_address function
            geocoded_info = geocode_address(full_address)
            
            if geocoded_info:
                # Safely extract information from geocoded_info and update the DataFrame
                aed_loc.at[index, 'postal_code'] = geocoded_info.get('display_name', '').split(',')[-2].strip() if 'display_name' in geocoded_info else None
                address_info = geocoded_info.get('address', {})
                aed_loc.at[index, 'municipality'] = address_info.get('municipality', None)
                aed_loc.at[index, 'province'] = address_info.get('state', None)
            
            # Respect the usage policy of the API, one request per second
            sleep(1)
